import logging
from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.sqlite_model import Task
from keyboards.admin import get_menu_markup
from keyboards.calendar import get_calendar_keyboard
from states.states import FSMTaskCreation
from handlers.callbacks import NavigationCD, TaskActionCD, TaskEditCD, TaskEditConfirmCD
from filters.roles import IsAdmin

from states.states import FSMTaskEdit

from handlers.admin import show_task_details

from lexicon.lexicon_ru import LEXICON_RU, LEXICON_RU_BUTTONS

logger = logging.getLogger(__name__)

# Create router specifically for task creation
router = Router()
router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())

@router.callback_query(TaskActionCD.filter(F.action == "edit"))
async def edit_task(call: CallbackQuery, callback_data: TaskActionCD, conn, state: FSMContext):
    task = await Task.get_by_id(conn, callback_data.task_id)
    if not task:
        await call.answer("Task not found")
        logger.error(f"User {call.from_user.username} (id={call.from_user.id}): Task id={callback_data.task_id} is not found in the DB")
        return

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    text += f"–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
    text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}\n"
    text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.description}\n"
    text += f"–ù–∞—á–∞–ª–æ: {task.start_ts.strftime('%Y-%m-%d %H:%M')}\n"
    text += f"–ö–æ–Ω–µ—Ü: {task.end_ts.strftime('%Y-%m-%d %H:%M')}\n"

    builder = InlineKeyboardBuilder()
    fields = [
        ("üìù –ù–∞–∑–≤–∞–Ω–∏–µ", "title"),
        ("üìã –û–ø–∏—Å–∞–Ω–∏–µ", "description"),
        ("üïí –ù–∞—á–∞–ª–æ", "start_ts"),
        ("üïï –ö–æ–Ω–µ—Ü", "end_ts")
    ]
    
    for button_text, field in fields:
        builder.button(
            text=button_text,
            callback_data=TaskEditCD(field=field, task_id=task.task_id).pack()
        )
    
    builder.button(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
        callback_data=TaskActionCD(action="view", task_id=task.task_id).pack()
    )
    
    builder.adjust(2, 1)
    await call.message.edit_text(text, reply_markup=builder.as_markup())

@router.callback_query(TaskEditCD.filter())
async def process_edit_field(call: CallbackQuery, callback_data: TaskEditCD, state: FSMContext, conn):
    field = callback_data.field
    task_id = callback_data.task_id
    
    task = await Task.get_by_id(conn, task_id)
    if not task:
        await call.answer("Task not found!")
        return
    
    await state.update_data(
        task_id=task_id, 
        field=field,
        current_start=task.start_ts.strftime("%Y-%m-%d %H:%M"),
        current_end=task.end_ts.strftime("%Y-%m-%d %H:%M")
    )
    await state.set_state(FSMTaskEdit.edit_value)
    
    builder = InlineKeyboardBuilder()
    if field in ['start_ts', 'end_ts']:
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=TaskActionCD(action="view", task_id=task_id).pack()
        )
        builder.adjust(1)
        await call.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é {field.replace('_ts', '')} –¥–∞—Ç—É:",
            reply_markup=get_calendar_keyboard()
        )
    else:
        builder.button(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=TaskActionCD(action="view", task_id=task_id).pack()
        )
        builder.adjust(1)
        await call.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ {field}:",
            reply_markup=builder.as_markup()
        )

@router.callback_query(lambda c: c.data.startswith(("date_", "month_")), FSMTaskEdit.edit_value)
async def process_calendar_edit_selection(call: CallbackQuery, state: FSMContext):
    if call.data.startswith("month_"):
        # Handle month navigation
        new_date = datetime.strptime(call.data[6:], "%Y-%m")
        await call.message.edit_reply_markup(
            reply_markup=get_calendar_keyboard(new_date)
        )
        return
    
    elif call.data.startswith("date_"):
        selected_date = call.data[5:]  # Get the date part
        data = await state.get_data()
        field = data['field']
        current_start = datetime.strptime(data['current_start'], "%Y-%m-%d %H:%M")
        current_end = datetime.strptime(data['current_end'], "%Y-%m-%d %H:%M")
        
        # Validate selected date for start_ts and end_ts
        selected_datetime = datetime.strptime(selected_date, "%Y-%m-%d")
        
        if field == 'start_ts' and selected_datetime.date() > current_end.date():
            builder = InlineKeyboardBuilder()
            builder.button(
                text="üìÖ –ü–æ–º–µ–Ω—è—Ç—å –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É",
                callback_data=TaskEditCD(field="end_ts", task_id=data['task_id']).pack()
            )
            builder.button(
                text="üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É",
                callback_data=TaskEditCD(field="start_ts", task_id=data['task_id']).pack()
            )
            builder.button(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=TaskActionCD(action="view", task_id=data['task_id']).pack()
            )
            builder.adjust(1)
            await call.message.edit_text(
                f"–û—à–∏–±–∫–∞: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Å–ª–µ –¥–∞—Ç—ã –∫–æ–Ω—Ü–∞ ({current_end.strftime('%Y-%m-%d')})",
                reply_markup=builder.as_markup()
            )
            return
            
        elif field == 'end_ts' and selected_datetime.date() < current_start.date():
            builder = InlineKeyboardBuilder()
            builder.button(
                text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É",
                callback_data=TaskEditCD(field="start_ts", task_id=data['task_id']).pack()
            )
            builder.button(
                text="üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É",
                callback_data=TaskEditCD(field="end_ts", task_id=data['task_id']).pack()
            )
            builder.button(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=TaskActionCD(action="view", task_id=data['task_id']).pack()
            )
            builder.adjust(1)
            await call.message.edit_text(
                f"–û—à–∏–±–∫–∞: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ –Ω–∞—á–∞–ª—å–Ω–æ–π ({current_start.strftime('%Y-%m-%d')}).",
                reply_markup=builder.as_markup()
            )
            return
        
        # Store selected date in state
        await state.update_data(selected_date=selected_date)
        
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=TaskActionCD(action="view", task_id=data['task_id']).pack()
        )
        builder.adjust(1)
        await call.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {selected_date}\n"
            f"–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30):",
            reply_markup=builder.as_markup()
        )

@router.message(FSMTaskEdit.edit_value)
async def process_edit_value(message: Message, state: FSMContext, conn):
    data = await state.get_data()
    field = data['field']
    task_id = data['task_id']
    
    task = await Task.get_by_id(conn, task_id)
    if not task:
        await message.answer("Task not found!")
        await state.clear()
        return

    if field in ['start_ts', 'end_ts']:
        try:
            selected_date = data.get('selected_date')
            if not selected_date:
                # If no date was selected, the user is trying to enter full datetime
                new_datetime = datetime.strptime(message.text, "%Y-%m-%d %H:%M")
                new_value = message.text
            else:
                # If date was selected, user is entering only time
                time = datetime.strptime(message.text, "%H:%M").strftime("%H:%M")
                new_value = f"{selected_date} {time}"
                new_datetime = datetime.strptime(new_value, "%Y-%m-%d %H:%M")

            current_start = datetime.strptime(data['current_start'], "%Y-%m-%d %H:%M")
            current_end = datetime.strptime(data['current_end'], "%Y-%m-%d %H:%M")
            
            if field == 'start_ts' and new_datetime >= current_end:
                builder = InlineKeyboardBuilder()
                builder.button(
                    text="üìÖ –ü–æ–º–µ–Ω—è—Ç—å –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è",
                    callback_data=TaskEditCD(field="end_ts", task_id=task_id).pack()
                )
                builder.button(
                    text="üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è",
                    callback_data=TaskEditCD(field="start_ts", task_id=task_id).pack()
                )
                builder.button(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data=TaskActionCD(action="view", task_id=task_id).pack()
                )
                builder.adjust(1)
                await message.answer(
                    f"–û—à–∏–±–∫–∞: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–Ω—Ü–∞ ({current_end.strftime('%Y-%m-%d %H:%M')}).",
                    reply_markup=builder.as_markup()
                )
                return
            
            elif field == 'end_ts' and new_datetime <= current_start:
                builder = InlineKeyboardBuilder()
                builder.button(
                    text="üìÖ –ü–æ–º–µ–Ω—è—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è",
                    callback_data=TaskEditCD(field="start_ts", task_id=task_id).pack()
                )
                builder.button(
                    text="üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è",
                    callback_data=TaskEditCD(field="end_ts", task_id=task_id).pack()
                )
                builder.button(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data=TaskActionCD(action="view", task_id=task_id).pack()
                )
                builder.adjust(1)
                await message.answer(
                    f"–û—à–∏–±–∫–∞: –ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ ({current_start.strftime('%Y-%m-%d %H:%M')}).",
                    reply_markup=builder.as_markup()
                )
                return
                
        except ValueError:
            builder = InlineKeyboardBuilder()
            builder.button(
                text="üìÖ –í—ã–±—Ä–∞—Ç—å –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è",
                callback_data=TaskEditCD(field=field, task_id=task_id).pack()
            )
            builder.button(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=TaskActionCD(action="view", task_id=task_id).pack()
            )
            builder.adjust(1)
            await message.answer(
                "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM (e.g. 09:30) or select from calendar:",
                reply_markup=builder.as_markup()
            )
            return

    # Confirm the change
    text = f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è {field}:\n\n{new_value}"
    
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
        callback_data=TaskEditConfirmCD(action="confirm", task_id=task_id, field=field).pack()
    )
    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=TaskEditConfirmCD(action="cancel", task_id=task_id, field=field).pack()
    )
    builder.button(
        text="üîÑ –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
        callback_data=TaskEditCD(field=field, task_id=task_id).pack()
    )
    
    builder.adjust(2, 1)
    await state.update_data(new_value=new_value)
    await state.set_state(FSMTaskEdit.confirm_edit)
    await message.answer(text, reply_markup=builder.as_markup())

@router.callback_query(TaskEditConfirmCD.filter())
async def process_edit_confirmation(call: CallbackQuery, callback_data: TaskEditConfirmCD, state: FSMContext, conn):
    if callback_data.action == "cancel":
        await state.clear()
        await call.message.edit_text("Edit cancelled")
        await show_task_details(call, TaskActionCD(action="view", task_id=callback_data.task_id), conn)
        return

    data = await state.get_data()
    new_value = data['new_value']
    field = callback_data.field
    task_id = callback_data.task_id

    # Update the task
    updated_task = await Task.update(conn, task_id, **{field: new_value})
    if updated_task:
        await call.message.edit_text(f"{field} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        logger.info(f"User {call.from_user.username} (id={call.from_user.id}) updated task {task_id} {field}")
        # Return to task view
        await show_task_details(call, TaskActionCD(action="view", task_id=task_id), conn)
    else:
        await call.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        logger.error(f"User {call.from_user.username} (id={call.from_user.id}) failed to update task {task_id} {field}")

    await state.clear()